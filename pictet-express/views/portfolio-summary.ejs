<%- include('partials/header') %>
<%- include('partials/secondary-nav') %>
<%- include('partials/client-header') %>

<!-- Add Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="main-container">
    <div class="portfolio-summary-header">
        <h1>Portfolio Summary</h1>
        <div class="portfolio-date" id="portfolio-date"></div>
    </div>

    <!-- Portfolio Overview Cards -->
    <div class="metrics-container">
        <div class="metric-item">
            <div class="metric-label">Total Portfolio Value</div>
            <div class="metric-value"><%= typeof formatNumber === 'function' ? formatNumber(processedData.metrics.totalValue) : processedData.metrics.totalValue.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }).replace('EUR', '€') %></div>
        </div>
        <div class="metric-item">
            <div class="metric-label">Total Investments</div>
            <div class="metric-value"><%= processedData.metrics.totalInvestments %></div>
        </div>
        <div class="metric-item">
            <div class="metric-label">Average Investment Size</div>
            <div class="metric-value"><%= typeof formatNumber === 'function' ? formatNumber(processedData.metrics.averageInvestmentSize) : processedData.metrics.averageInvestmentSize.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }).replace('EUR', '€') %></div>
        </div>
    </div>

    <!-- Asset Allocation Charts -->
    <div class="charts-container">
        <div class="chart-section">
            <h2>Asset Allocation</h2>
            <div class="chart-wrapper">
                <canvas id="assetAllocationChart"></canvas>
            </div>
        </div>
        <div class="chart-section">
            <h2>Geographic Distribution</h2>
            <div class="chart-wrapper">
                <canvas id="geographicAllocationChart"></canvas>
            </div>
        </div>
        <div class="chart-section">
            <h2>Portfolio Performance</h2>
            <div class="chart-wrapper">
                <canvas id="portfolioPerformanceChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Detailed Portfolio Tables -->
    <div class="portfolio-container">
        <div class="portfolio-section">
            <h2>Summary Portfolio Investments</h2>
            <div class="table-container">
                <table class="portfolio-table">
                    <thead>
                        <tr>
                            <th>Asset Type</th>
                            <th>Number of Investments</th>
                            <th>Total Value</th>
                            <th>Allocation %</th>
                            <th>Target Allocation %</th>
                            <th>Deviation %</th>
                            <th>Deviation $</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% Object.entries(processedData.metrics.assetTypeBreakdown).forEach(([type, count]) => { %>
                            <tr data-asset-type="<%= type %>">
                                <td><%= type %></td>
                                <td><%= count %></td>
                                <td><%= typeof formatNumber === 'function' ? formatNumber(processedData.metrics.assetAllocation[type] * processedData.metrics.totalValue / 100) : (processedData.metrics.assetAllocation[type] * processedData.metrics.totalValue / 100).toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }).replace('EUR', '€') %></td>
                                <td class="current-allocation"><%= processedData.metrics.assetAllocation[type].toFixed(2) %>%</td>
                                <td class="target-allocation-cell">
                                    <input type="number" 
                                           class="target-allocation-input" 
                                           min="0" 
                                           max="100" 
                                           step="0.01" 
                                           value="<%= processedData.metrics.assetAllocation[type].toFixed(2) %>"
                                           placeholder="0.00">%
                                </td>
                                <td class="deviation-cell">
                                    <span class="deviation-value">0.00%</span>
                                </td>
                                <td class="deviation-dollar-cell">
                                    <span class="deviation-dollar-value">€0</span>
                                </td>
                            </tr>
                        <% }); %>
                        <tr class="total-row">
                            <td><strong>TOTAL</strong></td>
                            <td><strong><%= Object.values(processedData.metrics.assetTypeBreakdown).reduce((sum, count) => sum + count, 0) %></strong></td>
                            <td><strong><%= typeof formatNumber === 'function' ? formatNumber(processedData.metrics.totalValue) : processedData.metrics.totalValue.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }).replace('EUR', '€') %></strong></td>
                            <td><strong>100.00%</strong></td>
                            <td class="target-total-cell"><strong><span id="target-total">100.00%</span></strong></td>
                            <td class="deviation-total-cell"><strong>-</strong></td>
                            <td class="deviation-dollar-total-cell"><strong>-</strong></td>
                        </tr>
                    </tbody>
                </table>
                <div class="target-allocation-controls">
                    <button id="save-targets" class="btn-primary">Save Target Allocations</button>
                    <button id="load-targets" class="btn-secondary">Load Saved Targets</button>
                    <button id="reset-targets" class="btn-outline">Reset to Current</button>
                    <button id="test-calc" class="btn-outline">Test Calculation</button>
                    <span id="save-status" class="save-status"></span>
                </div>
            </div>
        </div>

        <!-- Marketable Securities Section -->
        <div class="portfolio-section">
            <h2>Marketable Securities</h2>
            <div class="table-container">
                <table class="portfolio-table">
                    <thead>
                        <tr>
                            <th>Security Name</th>
                            <th>Symbol</th>
                            <th>Shares</th>
                            <th>Cost Basis</th>
                            <th>Current Price</th>
                            <th>Day Change</th>
                            <th>% Change</th>
                            <th>Market Value</th>
                            <th>Total Return</th>
                            <th>Return %</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% processedData.marketableSecurities.forEach(security => { %>
                            <tr>
                                <td><%= security.name %></td>
                                <td class="symbol-cell"><%= security.symbol %></td>
                                <td class="number-cell"><%= security.shares.toLocaleString() %></td>
                                <td class="currency-cell">$<%= security.basis.toFixed(2) %></td>
                                <td class="currency-cell">$<%= security.currentPrice.toFixed(2) %></td>
                                <td class="currency-cell <%= security.dayChange >= 0 ? 'positive' : 'negative' %>"><%= security.dayChange >= 0 ? '+' : '' %>$<%= security.dayChange.toFixed(2) %></td>
                                <td class="percentage-cell <%= security.dayChangePercent >= 0 ? 'positive' : 'negative' %>"><%= security.dayChangePercent >= 0 ? '+' : '' %><%= security.dayChangePercent.toFixed(2) %>%</td>
                                <td class="currency-cell">$<%= security.marketValue.toLocaleString() %></td>
                                <td class="currency-cell <%= security.totalReturn >= 0 ? 'positive' : 'negative' %>">$<%= security.totalReturn.toLocaleString() %></td>
                                <td class="percentage-cell <%= security.returnPercent >= 0 ? 'positive' : 'negative' %>"><%= security.returnPercent.toFixed(2) %>%</td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Combined Portfolio Table -->
        <div class="portfolio-section">
            <h2>Private Equity Investments</h2>
            <div class="table-container">
                <table class="portfolio-table">
                    <thead>
                        <tr>
                            <% if ((portfolio1.length > 0) || (portfolio2.length > 0)) { %>
                                <% const headers = portfolio1.length > 0 ? Object.keys(portfolio1[0]) : Object.keys(portfolio2[0]); %>
                                <% headers.forEach(header => { %>
                                    <th><%= header %></th>
                                <% }); %>
                            <% } %>
                        </tr>
                    </thead>
                    <tbody>
                        <% portfolio1.forEach(row => { %>
                            <tr>
                                <% Object.entries(row).forEach(([key, value]) => { %>
                                    <td>
                                        <% if (key === 'Fund Name') { %>
                                            <a href="/investment-details/<%= value.toLowerCase().replace(/\s+/g, '-') %>" class="fund-link">
                                                <%= value %>
                                            </a>
                                        <% } else if (typeof value === 'number') { %>
                                            <%= value.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }).replace('EUR', '€') %>
                                        <% } else { %>
                                            <%= value %>
                                        <% } %>
                                    </td>
                                <% }); %>
                            </tr>
                        <% }); %>
                        <% portfolio2.forEach(row => { %>
                            <tr>
                                <% Object.entries(row).forEach(([key, value]) => { %>
                                    <td>
                                        <% if (key === 'Fund Name') { %>
                                            <a href="/investment-details/<%= value.toLowerCase().replace(/\s+/g, '-') %>" class="fund-link">
                                                <%= value %>
                                            </a>
                                        <% } else if (typeof value === 'number') { %>
                                            <%= value.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }).replace('EUR', '€') %>
                                        <% } else { %>
                                            <%= value %>
                                        <% } %>
                                    </td>
                                <% }); %>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
.main-container {
    padding-top: 0.1rem !important;
}
.main-container h1, .main-container .fund-name {
    margin-top: 0 !important;
    padding-top: 0 !important;
}
.metrics-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 0.75rem;
    margin-bottom: 0.5rem !important;
}

.metric-item {
    background: white;
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.metric-label {
    font-size: 0.9rem;
    color: #666;
    margin-bottom: 0.25rem;
}

.metric-value {
    font-size: 1.4rem;
    font-weight: 600;
    color: #333;
}

.charts-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 1rem;
    margin-bottom: 0.5rem !important;
}

.chart-section {
    background: white;
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    min-height: 350px;
}

.chart-section h2 {
    margin: 0 0 0.75rem 0;
    font-size: 1.1rem;
}

.chart-wrapper {
    height: 300px;
    position: relative;
    margin-top: 0.5rem;
}

.portfolio-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.portfolio-section {
    background: white;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 0.5rem !important;
}

.portfolio-section h2 {
    margin: 0 0 0.75rem 0;
    font-size: 1.1rem;
}

.table-container {
    overflow-x: auto;
    margin-top: 0.5rem;
}

.portfolio-table {
    width: 100%;
    border-collapse: collapse;
    min-width: 800px;
    font-size: 0.9rem;
}

.portfolio-table th,
.portfolio-table td {
    padding: 0.6rem 0.75rem;
    border-bottom: 1px solid #eee;
    text-align: left;
}

.portfolio-table th {
    background-color: #f8f9fa;
    font-weight: 600;
    color: #333;
}

.portfolio-table td {
    font-size: 0.875rem;
}

/* Table Styles */
table {
    width: 100%;
    border-collapse: collapse;
    margin: 0.5rem 0;
}

th, td {
    padding: 0.6rem 0.75rem;
    border: 1px solid #e2e8f0;
}

th {
    background-color: #f8fafc;
    font-weight: 600;
}

/* Right justify Total Value column */
td:nth-child(2),
th:nth-child(2) {
    text-align: right;
}

.value-cell {
    text-align: right;
}

.fund-link {
    color: #003f5c;
    text-decoration: none;
    font-weight: 600;
    transition: color 0.2s;
}

.fund-link:hover {
    color: #002b3f;
    text-decoration: underline;
}

/* Marketable Securities specific styles */
.symbol-cell {
    font-weight: 600;
    color: #003f5c;
    font-family: 'Courier New', monospace;
}

.number-cell, .currency-cell, .percentage-cell {
    text-align: right;
}

.positive {
    color: #16a085;
    font-weight: 600;
}

.negative {
    color: #e74c3c;
    font-weight: 600;
}

.currency-cell {
    font-family: 'Courier New', monospace;
}

.percentage-cell {
    font-weight: 600;
}

/* Total row styling */
.total-row {
    border-top: 2px solid #003f5c;
    background-color: #f8f9fa;
}

.total-row td {
    font-weight: 600;
    color: #003f5c;
    padding-top: 0.75rem;
    padding-bottom: 0.75rem;
}

/* Target Allocation and Deviation Styles */
.target-allocation-cell {
    text-align: center;
}

.target-allocation-input {
    width: 70px;
    padding: 0.25rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    text-align: center;
    font-size: 0.85rem;
}

.target-allocation-input:focus {
    outline: none;
    border-color: #003f5c;
    box-shadow: 0 0 0 2px rgba(0, 63, 92, 0.1);
}

.deviation-cell {
    text-align: center;
}

.deviation-value {
    font-weight: 600;
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    font-size: 0.85rem;
}

.deviation-positive {
    color: #d73527;
    background-color: #ffeaea;
}

.deviation-negative {
    color: #28a745;
    background-color: #eafaf1;
}

.deviation-zero {
    color: #6c757d;
    background-color: #f8f9fa;
}

.target-total-cell, .deviation-total-cell {
    text-align: center;
}

/* Target Allocation Controls */
.target-allocation-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #e9ecef;
}

.btn-primary, .btn-secondary, .btn-outline {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-size: 0.9rem;
    font-weight: 600;
    cursor: pointer;
    border: 1px solid;
    transition: all 0.2s ease;
}

.btn-primary {
    background-color: #003f5c;
    color: white;
    border-color: #003f5c;
}

.btn-primary:hover {
    background-color: #002b3f;
    border-color: #002b3f;
}

.btn-secondary {
    background-color: #6c757d;
    color: white;
    border-color: #6c757d;
}

.btn-secondary:hover {
    background-color: #545b62;
    border-color: #545b62;
}

.btn-outline {
    background-color: transparent;
    color: #003f5c;
    border-color: #003f5c;
}

.btn-outline:hover {
    background-color: #003f5c;
    color: white;
}

.save-status {
    font-size: 0.85rem;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-weight: 600;
}

.save-status.success {
    color: #155724;
    background-color: #d4edda;
}

.save-status.error {
    color: #721c24;
    background-color: #f8d7da;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .main-container {
        padding: 1rem;
    }
    
    .chart-section {
        min-height: 300px;
    }
    
    .chart-wrapper {
        height: 250px;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Get the chart contexts
    const assetAllocationCtx = document.getElementById('assetAllocationChart').getContext('2d');
    const geographicAllocationCtx = document.getElementById('geographicAllocationChart').getContext('2d');
    const portfolioPerformanceCtx = document.getElementById('portfolioPerformanceChart').getContext('2d');

    // Parse the data from server
    const assetAllocation = <%- JSON.stringify(processedData.metrics.assetAllocation) %>;
    const geographicAllocation = <%- JSON.stringify(processedData.metrics.geographicAllocation) %>;
    const assetTypeBreakdown = <%- JSON.stringify(processedData.metrics.assetTypeBreakdown) %>;

    // Professional color palette
    const businessColors = {
        primary: [
            '#003f5c',  // Deep Blue
            '#2f4b7c',  // Navy Blue
            '#665191',  // Royal Purple
            '#a05195',  // Plum
            '#d45087',  // Burgundy
            '#f95d6a',  // Deep Red
            '#ff7c43',  // Burnt Orange
            '#ffa600'   // Gold
        ],
        geographic: [
            '#003f5c',  // Deep Blue
            '#444e86',  // Navy
            '#955196',  // Purple
            '#dd5182'   // Burgundy
        ],
        bar: {
            background: '#003f5c',
            border: '#002b3f'
        }
    };

    // Asset Allocation Chart
    new Chart(assetAllocationCtx, {
        type: 'pie',
        data: {
            labels: Object.keys(assetAllocation),
            datasets: [{
                data: Object.values(assetAllocation),
                backgroundColor: businessColors.primary
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 15,
                        font: {
                            size: 11
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return `${context.label}: ${context.raw}%`;
                        }
                    }
                },
                datalabels: {
                    color: '#fff',
                    font: {
                        weight: 'bold',
                        size: 14
                    },
                    formatter: function(value) {
                        return value + '%';
                    }
                }
            }
        },
        plugins: [{
            beforeDraw: function(chart) {
                var ctx = chart.ctx;
                ctx.save();
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.font = '14px Arial';
                ctx.fillStyle = '#fff';

                var total = chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                chart.data.datasets[0].data.forEach(function(value, i) {
                    var meta = chart.getDatasetMeta(0);
                    var arc = meta.data[i];
                    var centerX = (arc.x + arc.x) / 2;
                    var centerY = (arc.y + arc.y) / 2;
                    ctx.fillText(value + '%', centerX, centerY);
                });
                ctx.restore();
            }
        }]
    });

    // Geographic Distribution Chart
    new Chart(geographicAllocationCtx, {
        type: 'pie',
        data: {
            labels: Object.keys(geographicAllocation),
            datasets: [{
                data: Object.values(geographicAllocation),
                backgroundColor: businessColors.geographic
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 15,
                        font: {
                            size: 11
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return `${context.label}: ${context.raw}%`;
                        }
                    }
                },
                datalabels: {
                    color: '#fff',
                    font: {
                        weight: 'bold',
                        size: 14
                    },
                    formatter: function(value) {
                        return value + '%';
                    }
                }
            }
        },
        plugins: [{
            beforeDraw: function(chart) {
                var ctx = chart.ctx;
                ctx.save();
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.font = '14px Arial';
                ctx.fillStyle = '#fff';

                var total = chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                chart.data.datasets[0].data.forEach(function(value, i) {
                    var meta = chart.getDatasetMeta(0);
                    var arc = meta.data[i];
                    var centerX = (arc.x + arc.x) / 2;
                    var centerY = (arc.y + arc.y) / 2;
                    ctx.fillText(value + '%', centerX, centerY);
                });
                ctx.restore();
            }
        }]
    });

    // Calculate total values for each asset type
    const totalValue = <%= processedData.metrics.totalValue %>;
    const assetValues = {};
    Object.keys(assetAllocation).forEach(assetType => {
        assetValues[assetType] = (assetAllocation[assetType] / 100) * totalValue;
    });

    // Portfolio Performance Chart (Line Chart) - From Inception with Fluctuations
    const performanceData = {
        labels: ['Jan 2020', 'Apr 2020', 'Jul 2020', 'Oct 2020', 'Jan 2021', 'Apr 2021', 'Jul 2021', 'Oct 2021',
                'Jan 2022', 'Apr 2022', 'Jul 2022', 'Oct 2022', 'Jan 2023', 'Apr 2023', 'Jul 2023', 'Oct 2023',
                'Jan 2024', 'Apr 2024', 'Jul 2024', 'Oct 2024', 'Jan 2025', 'Apr 2025', 'Jul 2025', 'Sep 2025'],
        datasets: [{
            label: 'Portfolio Value (€)',
            data: [10000000, 8750000, 9200000, 10500000, 11800000, 12200000, 13100000, 12800000,
                  13500000, 12900000, 11800000, 12400000, 13800000, 14500000, 15200000, 14800000,
                  15600000, 16200000, 17100000, 16800000, 17500000, 18200000, 19100000, 20000000],
            borderColor: '#003f5c',
            backgroundColor: 'rgba(0, 63, 92, 0.1)',
            borderWidth: 3,
            fill: true,
            tension: 0.3,
            pointRadius: 3,
            pointHoverRadius: 6,
            pointBackgroundColor: '#003f5c',
            pointBorderColor: '#ffffff',
            pointBorderWidth: 2
        }]
    };

    new Chart(portfolioPerformanceCtx, {
        type: 'line',
        data: performanceData,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
                intersect: false,
                mode: 'index'
            },
            scales: {
                x: {
                    display: true,
                    title: {
                        display: true,
                        text: 'Time Period (Since Inception)'
                    },
                    grid: {
                        display: false
                    },
                    ticks: {
                        maxTicksLimit: 8
                    }
                },
                y: {
                    display: true,
                    title: {
                        display: true,
                        text: 'Portfolio Value (€)'
                    },
                    ticks: {
                        callback: function(value) {
                            return '€' + (value / 1000000).toFixed(1) + 'M';
                        }
                    },
                    grid: {
                        color: 'rgba(0, 0, 0, 0.1)'
                    }
                }
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'top'
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    titleColor: 'white',
                    bodyColor: 'white',
                    borderColor: '#003f5c',
                    borderWidth: 1,
                    callbacks: {
                        label: function(context) {
                            return context.dataset.label + ': €' + context.raw.toLocaleString('de-DE');
                        }
                    }
                }
            }
        }
    });

});

// Global Target Allocation and Deviation Calculation
window.calculateDeviations = function() {
    console.log('=== CALCULATION STARTED ===');
    
    const targetInputs = document.querySelectorAll('.target-allocation-input');
    console.log('Found target inputs:', targetInputs.length);
    
    let totalTarget = 0;
    
    // Get the total portfolio value for dollar calculations
    const totalPortfolioValue = 20000000; // This should match the processedData.metrics.totalValue from server

    targetInputs.forEach((input, index) => {
        const row = input.closest('tr');
        if (!row || row.classList.contains('total-row')) {
            console.log('Skipping row', index, '- total row or no row');
            return;
        }
        
        const currentAllocationCell = row.querySelector('.current-allocation');
        const deviationCell = row.querySelector('.deviation-value');
        const deviationDollarCell = row.querySelector('.deviation-dollar-value');
        const assetType = row.getAttribute('data-asset-type');
        
        if (!currentAllocationCell || !deviationCell || !deviationDollarCell) {
            console.log('Missing cells for row', index);
            return;
        }
        
        const currentAllocation = parseFloat(currentAllocationCell.textContent.replace('%', ''));
        const targetAllocation = parseFloat(input.value) || 0;
        const deviation = currentAllocation - targetAllocation;
        
        // Calculate dollar deviation
        const deviationDollar = (deviation / 100) * totalPortfolioValue;
        
        console.log(`${assetType}: Current=${currentAllocation}%, Target=${targetAllocation}%, Deviation=${deviation.toFixed(2)}%, Deviation$=${deviationDollar.toLocaleString()}`);
        
        // Update individual deviation percentage
        deviationCell.textContent = (deviation >= 0 ? '+' : '') + deviation.toFixed(2) + '%';
        
        // Update individual deviation dollar amount
        const formattedDeviationDollar = (deviationDollar >= 0 ? '+€' : '-€') + Math.abs(deviationDollar).toLocaleString('de-DE');
        deviationDollarCell.textContent = formattedDeviationDollar;
        
        // Set base classes without color coding
        deviationCell.className = 'deviation-value';
        deviationDollarCell.className = 'deviation-dollar-value';
        
        // Add to totals
        totalTarget += targetAllocation;
    });

    console.log('TOTAL TARGET CALCULATED:', totalTarget.toFixed(2) + '%');

    // Update target total display
    const targetTotalElement = document.getElementById('target-total');
    if (targetTotalElement) {
        console.log('Updating target total element to:', totalTarget.toFixed(2) + '%');
        targetTotalElement.textContent = totalTarget.toFixed(2) + '%';
        
        // Color code based on whether it equals 100%
        if (Math.abs(totalTarget - 100) < 0.01) {
            targetTotalElement.style.color = '#28a745';
        } else {
            targetTotalElement.style.color = '#d73527';
        }
    } else {
        console.log('ERROR: target-total element not found!');
    }
    
    // Deviation % total is not meaningful, so we skip updating it
    
    // Deviation $ total is also not meaningful, so we skip updating it
    
    console.log('=== CALCULATION COMPLETED ===');
};

// Setup event listeners on DOM ready
document.addEventListener('DOMContentLoaded', function() {
    // Set current date
    const portfolioDateElement = document.getElementById('portfolio-date');
    if (portfolioDateElement) {
        const today = new Date();
        const options = { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric'
        };
        portfolioDateElement.textContent = today.toLocaleDateString('en-US', options);
    }

    // Save and Load Target Allocations
    function saveTargetAllocations() {
        const targets = {};
        const inputs = document.querySelectorAll('.target-allocation-input');
        
        inputs.forEach(input => {
            const row = input.closest('tr');
            const assetType = row.getAttribute('data-asset-type');
            targets[assetType] = parseFloat(input.value) || 0;
        });
        
        localStorage.setItem('portfolioTargetAllocations', JSON.stringify(targets));
        
        // Show success message
        const statusElement = document.getElementById('save-status');
        statusElement.textContent = 'Target allocations saved!';
        statusElement.className = 'save-status success';
        setTimeout(() => {
            statusElement.textContent = '';
            statusElement.className = 'save-status';
        }, 3000);
    }
    
    function loadTargetAllocations() {
        const savedTargets = localStorage.getItem('portfolioTargetAllocations');
        
        if (savedTargets) {
            const targets = JSON.parse(savedTargets);
            const inputs = document.querySelectorAll('.target-allocation-input');
            
            inputs.forEach(input => {
                const row = input.closest('tr');
                const assetType = row.getAttribute('data-asset-type');
                if (targets[assetType] !== undefined) {
                    input.value = targets[assetType].toFixed(2);
                }
            });
            
            window.calculateDeviations();
            
            // Show success message
            const statusElement = document.getElementById('save-status');
            statusElement.textContent = 'Target allocations loaded!';
            statusElement.className = 'save-status success';
            setTimeout(() => {
                statusElement.textContent = '';
                statusElement.className = 'save-status';
            }, 3000);
        } else {
            // Show error message
            const statusElement = document.getElementById('save-status');
            statusElement.textContent = 'No saved target allocations found.';
            statusElement.className = 'save-status error';
            setTimeout(() => {
                statusElement.textContent = '';
                statusElement.className = 'save-status';
            }, 3000);
        }
    }
    
    function resetToCurrentAllocations() {
        const inputs = document.querySelectorAll('.target-allocation-input');
        
        inputs.forEach(input => {
            const row = input.closest('tr');
            const currentAllocationText = row.querySelector('.current-allocation').textContent;
            const currentAllocation = parseFloat(currentAllocationText.replace('%', ''));
            input.value = currentAllocation.toFixed(2);
        });
        
        calculateDeviations();
        
        // Show success message
        const statusElement = document.getElementById('save-status');
        statusElement.textContent = 'Reset to current allocations!';
        statusElement.className = 'save-status success';
        setTimeout(() => {
            statusElement.textContent = '';
            statusElement.className = 'save-status';
        }, 3000);
    }

    // Add event listeners to all target allocation inputs
    const inputs = document.querySelectorAll('.target-allocation-input');
    
    inputs.forEach((input) => {
        input.addEventListener('input', window.calculateDeviations);
        input.addEventListener('change', window.calculateDeviations);
        input.addEventListener('blur', window.calculateDeviations);
    });
        
        // Add button event listeners
        document.getElementById('save-targets').addEventListener('click', saveTargetAllocations);
        document.getElementById('load-targets').addEventListener('click', loadTargetAllocations);
        document.getElementById('reset-targets').addEventListener('click', resetToCurrentAllocations);
    document.getElementById('test-calc').addEventListener('click', function() {
        console.log('Test button clicked - triggering calculation...');
        window.calculateDeviations();
    });
    
    // Auto-load saved targets on page load
    const savedTargets = localStorage.getItem('portfolioTargetAllocations');
    if (savedTargets) {
        loadTargetAllocations();
    } else {
        // Initial calculation
        setTimeout(window.calculateDeviations, 100);
    }
    });
</script>

<%- include('partials/footer') %> < ! - -   F o r c e   r e f r e s h   - - >  
 